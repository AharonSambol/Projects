int beeramid(int bonus, price){
    i = 1
    amountOfBeer = bonus
    until (amountOfBeer - i ^ 2) < 0 {
        i++
    }
    return i - 1
}

int SequenceClassifier(int[] arr){
    possibilities = {int: 1, 2, 3, 4, 5}
    prev = arr[0]
    for i, val in enum(arr){
        if i == 0 { continue }
        if val == prev{
            possibilities.Remove(1)
            possibilities.Remove(3)
        } else {
            possibilities.Remove(5)
            if val < prev {
                possibilities.Remove(1)
                possibilities.Remove(2)
            } else {
                possibilities.Remove(3)
                possibilities.Remove(4)
            }
        }
        if possibilities.Count <= 1 {   break }
        prev = val
    }
    for i in [int: 1, 3, 5, 2, 4] {
        if possibilities.Contains(i) {
            return i
        }
    }
    return 0
}


Obj Finder {
    staticVars{
        int[][] dirs = [int[]:[int:-1, 0], [int:1, 0], [int:0, 1], [int:0, -1]]
        str[] w_null = [str: null, "W"]
    }
    staticFuncs{
        bool PathFinder(str maze_st){
            if maze_st.len == 1{   return true }
            maze = [str[]: x.ToList() for x in maze_st.Split('\\n')]
            maze[0][0] = "W"
            posses = [int[]:[int:0, 0]]
            until posses.len == 0 {
                pos = posses.Pop(0)
                for direction in cls.dirs {
                    row = pos[0] + direction[0]
                    col = pos[1] + direction[1]
                    if maze[?row][?col] in cls.w_null {
                        continue
                    }
                    if row == col and col == maze.len - 1 {
                        return true
                    }
                    maze[row][col] = "W"
                    posses.Add([int: row, col])
                }
            }
            return false
        }
    }
}


string formatDuration(int seconds){
    if seconds==0 { return "now"}
    arr = [str:]
    for num, name in zip([int: 31536000, 86400, 3600, 60, 1], [str: "year", "day", "hour", "minute", "second"]){
        arr.Add((seconds // num) + " " + name)
        seconds %= num
    }
    ans=""
    count=0
    for s in arr {
        if s[0] != '0' {
            count += 1
        }
    }
    for s in arr {
        if s[0] == '0'{   continue }
        count -= 1
        if ans.len != 0{
            ans += " "
        }
        if s[0] + s[1] == '1 '{
            ans += s
        } else {
            ans += s + "s"
        }
        if count > 1 {
            ans += ","
        } elif count > 0{
            ans += " and"
        }
    }
    return ans
}




